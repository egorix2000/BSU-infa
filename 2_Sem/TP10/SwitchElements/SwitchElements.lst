Microsoft (R) Macro Assembler Version 14.20.27508.1	    05/30/19 12:01:11
AsmSource.asm						     Page 1 - 1


				.386
				.MODEL FLAT
 00000000			.DATA?
 00000000 00000000		n		dd		?
 00000004 00000000		max		dd		?
 00000008 00000000		i_max	dd		?
 0000000C 00000000		min		dd		?
 00000010 00000000		i_min	dd		?
 00000014 00000000		array	dd		?
 00000018 00000000		index	dd		?
 00000000			.CODE
				;-----------Function definitions--------------------
 00000000			@getColumnExtrema@8 PROC
 00000000  C7 05 00000008 R		mov i_max, 0
	   00000000
 0000000A  C7 05 00000010 R		mov i_min, 0
	   00000000
 00000014  89 0D 00000014 R		mov array, ecx
 0000001A  C7 05 0000000C R		mov min, 0
	   00000000
 00000024  C7 05 00000004 R		mov max, 0
	   00000000
 0000002E  BE 00000000			mov esi, 0
 00000033				begin_init_min_max_loop:
 00000033  8B 0D 00000014 R			mov ecx, array
 00000039  8B 0C B1				mov ecx, [ecx + esi*4]
 0000003C  8B 09				mov ecx, [ecx]
 0000003E  01 0D 0000000C R			add min, ecx
 00000044  46					inc esi
 00000045  3B F2				cmp esi, edx
 00000047  7C EA				jl begin_init_min_max_loop
 00000049				end_init_min_max_loop:
 00000049  8B 35 0000000C R		mov esi, min
 0000004F  89 35 00000004 R		mov max, esi
 00000055  BE 00000000			mov esi, 0
 0000005A				begin_external_loop:
 0000005A  BB 00000000				mov ebx, 0
 0000005F  BF 00000000				mov edi, 0
 00000064					begin_internal_loop:
 00000064  8B 0D 00000014 R				mov ecx, array
 0000006A  8B 0C B9					mov ecx, [ecx + edi*4]
 0000006D  8B 0C B1					mov ecx, [ecx + esi*4]
 00000070  03 D9					add ebx, ecx
 00000072  47						inc edi
 00000073  3B FA					cmp edi, edx
 00000075  7C ED					jl begin_internal_loop
 00000077					end_internal_loop: 
 00000077  8B 0D 00000004 R			mov ecx, max
 0000007D  3B D9				cmp ebx, ecx
 0000007F  7F 0C				jg if_greater_than_max_begin
 00000081  8B 0D 0000000C R			mov ecx, min
 00000087  3B D9				cmp ebx, ecx
 00000089  7C 10				jl if_less_than_min_begin
 0000008B  EB 1A				jmp if_less_than_min_end
 0000008D					if_greater_than_max_begin:
 0000008D  89 1D 00000004 R				mov max, ebx
 00000093  89 35 00000008 R				mov i_max, esi
 00000099  EB 0C					jmp if_less_than_min_end
 0000009B					if_greater_than_max_end:
 0000009B					if_less_than_min_begin:
 0000009B  89 1D 0000000C R				mov min, ebx
 000000A1  89 35 00000010 R				mov i_min, esi
 000000A7					if_less_than_min_end:
 000000A7  46					inc esi
 000000A8  3B F2				cmp esi, edx
 000000AA  7C AE				jl begin_external_loop
 000000AC				end_external_loop:
 000000AC  8B 0D 00000010 R		mov ecx, i_min
 000000B2  8B 15 00000008 R		mov edx, i_max
 000000B8  A1 00000014 R		mov eax, array
 000000BD  C3				ret
 000000BE			@getColumnExtrema@8 ENDP

 000000BE			@switchColumnExtrema@8 PROC
 000000BE  E8 FFFFFF3D			call @getColumnExtrema@8
 000000C3  89 0D 0000000C R		mov min, ecx
 000000C9  89 15 00000004 R		mov max, edx 
 000000CF  BE 00000000			mov esi, 0
 000000D4				begin_loop:
 000000D4  3B 35 00000000 R			cmp esi, n
 000000DA  7D 21				jnl end_loop

 000000DC  8B 0C B0				mov ecx, [eax + esi*4]
 000000DF  8B 3D 0000000C R			mov edi, min
 000000E5  8D 0C B9				lea ecx, [ecx + edi*4]

 000000E8  8B 14 B0				mov edx, [eax + esi*4]
 000000EB  8B 3D 00000004 R			mov edi, max
 000000F1  8D 14 BA				lea edx, [edx + edi*4]

 000000F4  8B 39				mov edi, [ecx]
 000000F6  87 3A				xchg edi, [edx]
 000000F8  89 39				mov [ecx], edi

 000000FA  46					inc esi
 000000FB  EB D7				jmp begin_loop
 000000FD				end_loop:
 000000FD  C3				ret
 000000FE			@switchColumnExtrema@8 ENDP

 000000FE			_swap PROC
 000000FE  55				push ebp
 000000FF  8B EC			mov ebp, esp
 00000101  8B 45 08			mov eax, [ebp+8] 
 00000104  8B 5D 0C			mov ebx, [ebp+12]
 00000107  89 1D 00000000 R		mov n, ebx
 0000010D  8B 5D 10			mov ebx, [ebp+16]
 00000110  89 1D 00000018 R		mov index, ebx
 00000116  BE 00000000			mov esi, 0
 0000011B				begin_loop:
 0000011B  3B 35 00000000 R			cmp esi, n
 00000121  7D 21				jnl end_loop

 00000123  8B 3D 00000018 R			mov edi, index
 00000129  8B 0C B8				mov ecx, [eax + edi*4]
 0000012C  8D 0C B1				lea ecx, [ecx + esi*4]

 0000012F  8B 3D 00000018 R			mov edi, index
 00000135  8B 14 B0				mov edx, [eax + esi*4]
 00000138  8D 14 BA				lea edx, [edx + edi*4]

 0000013B  8B 39				mov edi, [ecx]
 0000013D  87 3A				xchg edi, [edx]
 0000013F  89 39				mov [ecx], edi

 00000141  46					inc esi
 00000142  EB D7				jmp begin_loop
 00000144				end_loop:
 00000144  5D				pop ebp
 00000145  C3				ret
 00000146			_swap ENDP
				END
 
Microsoft (R) Macro Assembler Version 14.20.27508.1	    05/30/19 12:01:11
AsmSource.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_BSS . . . . . . . . . . . . . .	32 Bit	 0000001C DWord	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000146 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

@getColumnExtrema@8  . . . . . .	P Near	 00000000 _TEXT	Length= 000000BE Public
  begin_init_min_max_loop  . . .	L Near	 00000033 _TEXT	
  end_init_min_max_loop  . . . .	L Near	 00000049 _TEXT	
  begin_external_loop  . . . . .	L Near	 0000005A _TEXT	
  begin_internal_loop  . . . . .	L Near	 00000064 _TEXT	
  end_internal_loop  . . . . . .	L Near	 00000077 _TEXT	
  if_greater_than_max_begin  . .	L Near	 0000008D _TEXT	
  if_greater_than_max_end  . . .	L Near	 0000009B _TEXT	
  if_less_than_min_begin . . . .	L Near	 0000009B _TEXT	
  if_less_than_min_end . . . . .	L Near	 000000A7 _TEXT	
  end_external_loop  . . . . . .	L Near	 000000AC _TEXT	
@switchColumnExtrema@8 . . . . .	P Near	 000000BE _TEXT	Length= 00000040 Public
  begin_loop . . . . . . . . . .	L Near	 000000D4 _TEXT	
  end_loop . . . . . . . . . . .	L Near	 000000FD _TEXT	
_swap  . . . . . . . . . . . . .	P Near	 000000FE _TEXT	Length= 00000048 Public
  begin_loop . . . . . . . . . .	L Near	 0000011B _TEXT	
  end_loop . . . . . . . . . . .	L Near	 00000144 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
array  . . . . . . . . . . . . .	DWord	 00000014 _BSS	
i_max  . . . . . . . . . . . . .	DWord	 00000008 _BSS	
i_min  . . . . . . . . . . . . .	DWord	 00000010 _BSS	
index  . . . . . . . . . . . . .	DWord	 00000018 _BSS	
max  . . . . . . . . . . . . . .	DWord	 00000004 _BSS	
min  . . . . . . . . . . . . . .	DWord	 0000000C _BSS	
n  . . . . . . . . . . . . . . .	DWord	 00000000 _BSS	

	   0 Warnings
	   0 Errors
